resources:
  - name: prod_eng_assignment2
    type: GitRepo
    configuration:
      gitProvider: github_integration
      path: tamirdavid/prod_eng_assignment
      branches:
        include: ^{{gitBranch}}$

  - name: image_resource2
    type: Image
    configuration:
      registry: artifactory_integration  
      sourceRepository: docker-local 
      imageName: tamird.jfrog.io/vfrog/{{gitBranch}} 
      imageTag: latest
      autoPull: true


  - name: myDockerBuildInfo1
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory_integration
      buildName: vfrog-{{gitBranch}}
      buildNumber: ${run_number}

  - name: myHelmBuildInfo1
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory_integration
      buildName: {{gitBranch}}_helmchart
      buildNumber: ${run_number}

  - name: {{gitBranch}}_helm_chart1
    type: HelmChart
    configuration:
        sourceArtifactory: artifactory_integration
        repository: vfrog_webapp_helm_repo
        chart: vfrog-helm
        version: ${run_number}
        

pipelines:
  - name: vfrog_{{gitBranch}}_pipeline

    steps:
      - name: {{gitBranch}}_docker_build
        type: DockerBuild
        configuration:
          affinityGroup: dbp_group
          dockerFileLocation: /application/.
          dockerFileName: Dockerfile
          dockerImageName: tamird.jfrog.io/vfrog/{{gitBranch}} 
          dockerImageTag: ${run_number}
          inputResources:
            - name: prod_eng_assignment2
          integrations:
            - name: artifactory_integration  


      - name: docker_push
        type: DockerPush
        configuration:
          affinityGroup: dbp_group
          forceXrayScan: true
          failOnScan: true
          autoPublishBuildInfo: true
          targetRepository: vfrog
          integrations:
            - name: artifactory_integration    
          inputSteps:
            - name: {{gitBranch}}_docker_build
          outputResources:
            - name: image_resource2
            - name: myDockerBuildInfo1


      - name: {{gitBranch}}_helm_publish
        type: HelmPublish
        configuration:
          affinityGroup: dbp_group
          helmVersion: 3                            # optional, defaults to 2
          chartPath: vfrog-helm # Path in git repo.
          autoPublishBuildInfo: true                     # default false
          inputSteps:
            - name: docker_push
          inputResources:
            - name: prod_eng_assignment2                     # required
          outputResources:
            - name: {{gitBranch}}_helm_chart1
            - name: myHelmBuildInfo1
        execution:
          onStart:
            - export HELM_VERSION="3.4.1"
            - curl -LO "https://get.helm.sh/helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - tar -xzf "helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - ln -sf "$PWD/linux-amd64/helm" /usr/local/bin/helm
            - ln -sf "$PWD/linux-amd64/helm" /usr/local/bin/helm3

      - name: helm_deploy_{{gitBranch}}_vfrog
        type: HelmDeploy
        configuration:
          helmVersion: 3
          releaseName: vfrog
          inputSteps:
            - name: {{gitBranch}}_helm_publish
          flags: --namespace {{gitBranch}} --debug --set image.repository=${res_image_resource2_imageName} --set image.tag=${run_number} # --set image.tag=${run_number}
          integrations:
            - name: gke_integration
            - name: gke_integration_new
          inputResources:
            - name: {{gitBranch}}_helm_chart1
            - name: image_resource2
        execution:
          onStart:
            - export HELM_VERSION="3.4.1"
            - curl -LO "https://get.helm.sh/helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - tar -xzf "helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - ln -sf "$PWD/linux-amd64/helm" /usr/local/bin/helm
            - ln -sf "$PWD/linux-amd64/helm" /usr/local/bin/helm3
            - gcloud app update
            - gcloud container clusters get-credentials vfrog --zone europe-west1-c --project vfrog-gke
        
        
      - name: slack_notification
        type: Bash
        configuration:
          integrations:
            - name: slackIntegration    
          inputSteps:
            - name: helm_deploy_{{gitBranch}}_vfrog
        execution:
          onSuccess:
            - send_notification notifySlack --text "Image: ${res_image_resource2_imageName} in Version: ${run_number} is now available in {{gitBranch}}. Check https://{{gitBranch}}.clicorona.xyz" --recipient "#myChannel"


