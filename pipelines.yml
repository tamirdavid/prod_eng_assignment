resources:
  - name: prod_eng_assignment
    type: GitRepo
    configuration:
      gitProvider: github_integration
      path: tamirdavid/prod_eng_assignment
      branches:
        include: dev

  - name: image_dev_resource
    type: Image
    configuration:
      registry: artifactory_integration      # replace with your Artifactory integration
      sourceRepository: docker-local  # required if registry is Artifactory
      imageName: tamird.jfrog.io/vfrog-dev/dev # replace with your image path and name
      imageTag: latest
      autoPull: true

  - name: myDockerBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory_integration
      buildName: vfrog-dev
      buildNumber: ${run_number}

  - name: myHelmBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactory_integration
      buildName: dev_helmchart
      buildNumber: ${run_number}

  - name: dev_helm_chart
    type: HelmChart
    configuration:
        sourceArtifactory: artifactory_integration
        repository: vfrog_webapp_helm_repo
        chart: vfrog-helm
        version: latest


pipelines:
  - name: vfrog_dev_pipeline
#    configuration:

    steps:
      - name: dev_docker_build
        type: DockerBuild
        configuration:
          affinityGroup: dbp_group
          dockerFileLocation: /application/.
          dockerFileName: Dockerfile
          dockerImageName: tamird.jfrog.io/vfrog-dev/dev  # replace with your image path and name
          dockerImageTag: ${run_number}
          inputResources:
            - name: prod_eng_assignment
          integrations:
            - name: artifactory_integration    # replace with your artifactory integration
        execution:
         onComplete:
            - echo "Running $pipeline_name | $step_name on Node ID $step_node_id"

      - name: docker_push
        type: DockerPush
        configuration:
          affinityGroup: dbp_group
          forceXrayScan: true
          failOnScan: true
          autoPublishBuildInfo: true
          targetRepository: vfrog-dev
          integrations:
            - name: artifactory_integration    # replace with your artifactory integration
          inputSteps:
            - name: dev_docker_build
          outputResources:
            - name: image_dev_resource
            - name: myDockerBuildInfo
        execution:
         onComplete:
            - echo "Running $pipeline_name | $step_name on Node ID $step_node_id"

      - name: dev_helm_publish
        type: HelmPublish
        configuration:
          affinityGroup: dbp_group
          helmVersion: 3                            # optional, defaults to 2
          chartPath: vfrog-helm
          autoPublishBuildInfo: true                     # default false
          inputSteps:
            - name: docker_push
          inputResources:
            - name: prod_eng_assignment                     # required
          outputResources:
            - name: dev_helm_chart
            - name: myHelmBuildInfo
        execution:
          onStart:
            - export HELM_VERSION="3.4.1"
            - curl -LO "https://get.helm.sh/helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - tar -xzf "helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - ln -sf "$PWD/linux-amd64/helm" /usr/local/bin/helm
            - ln -sf "$PWD/linux-amd64/helm" /usr/local/bin/helm3
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"



      - name: helm_deploy_dev_vfrog
        type: HelmDeploy
        configuration:
          helmVersion: 3
#          valueFilePaths:
#            - <path and filename>
          releaseName: vfrog
          inputSteps:
            - name: dev_helm_publish
          flags: "--namespace dev --debug --set image.repository=${res_image_dev_resource_imageName} --set image.tag=65"
          integrations:
            - name: gke_integration
            - name: gke_integration_new
          inputResources:
            - name: dev_helm_chart
            - name: image_dev_resource
        execution:
          onStart:
            - export HELM_VERSION="3.4.1"
            - curl -LO "https://get.helm.sh/helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - tar -xzf "helm-v$HELM_VERSION-linux-amd64.tar.gz"
            - ln -sf "$PWD/linux-amd64/helm" /usr/local/bin/helm
            - ln -sf "$PWD/linux-amd64/helm" /usr/local/bin/helm3
            - gcloud version
            - ls
            - env
            - gcloud app update
            - gcloud container clusters get-credentials vfrog --zone europe-west1-c --project vfrog-gke
            - kubectl version

